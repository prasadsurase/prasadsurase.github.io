<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[a sleepy programmer's blog]]></title>
  <link href="http://prasadsurase.github.io/atom.xml" rel="self"/>
  <link href="http://prasadsurase.github.io/"/>
  <updated>2016-05-29T16:39:55+05:30</updated>
  <id>http://prasadsurase.github.io/</id>
  <author>
    <name><![CDATA[Prasad Surase]]></name>
    <email><![CDATA[prasadsurase@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Basic Concepts in React]]></title>
    <link href="http://prasadsurase.github.io/blog/2016/05/29/basic-concepts-in-react/"/>
    <updated>2016-05-29T16:30:39+05:30</updated>
    <id>http://prasadsurase.github.io/blog/2016/05/29/basic-concepts-in-react</id>
    <content type="html"><![CDATA[<p>Since last couple of days, I have been experimenting with ReactJS. I followed the official
<a href="https://facebook.github.io/react/docs/tutorial.html">Tutorial</a>, <a href="https://facebook.github.io/react/docs/thinking-in-react.html">Thinking in React</a>
and some other blogs. This post is a summary of what I learned. I will try to keep is as simple as possible.</p>

<p><strong>What is React</strong>? React is a JavaScript library to manage and render Views(V in MVC). The views are rendered by React
<strong>Component</strong>s.</p>

<p>Lets read some simple code. A simple &lsquo;Hello React&rsquo; program.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;UTF-8&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>Hello React!<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;build/react.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;build/react-dom.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;example&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/babel&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">HelloWorld</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">getInitialState</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>          <span class="k">return</span> <span class="p">{</span><span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;Hello&#39;</span><span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>          <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/h3&gt;</span>
</span><span class='line'>          <span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">HelloWorld</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;React&quot;</span> <span class="o">/&gt;</span><span class="p">,</span>
</span><span class='line'>        <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;container&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">);</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the above code sample, we have a HTML page with some JS code defined inside the <em>script</em> tag. The JS code has some HTML too. This HTML inside JS is
called <a href="https://jsx.github.io">JSX</a>. <a href="https://babeljs.io/">Babel</a> is a library to parse JSX. React uses JSX to render the HTML.</p>

<h2>Some basic terminologies:</h2>

<p><strong>Component</strong>: A component is an entity that is supposed to do only one thing. Ideally, it should follow <strong><em>Single Responsibility
Principle</em></strong>. The main task of a component is to <strong>render data</strong>(props/<em>state</em>). Component doesn&rsquo;t inherit other Component but
data(<em>state</em>/props) is passed form one Component(parent) to another Component(child).</p>

<p><strong>state</strong>: A Component&rsquo;s data that it has not inherited from the parent Component is called state.</p>

<p><strong>props</strong>: Data that a Component inherits from the parent/Ancestor Component is called props(properties).</p>

<p>React follows <strong><em>unidirectional data flow</em></strong>. What it means is that a Component(parent) passes data(state/props) to another
Component(child). When the data of the parent is altered, the child component automatically update itself.</p>

<p>In the javascript of the above code sample, we have 2 entities named <strong>ReactDOM</strong> and <strong>HelloWorld</strong>. In React, these are called
<strong>Component</strong>. In the above code, the <strong>ReactDOM</strong> is calling the <strong>HelloWorld</strong> component passing some data(ie. name=&ldquo;React&rdquo;).
Hence, the parent component is <strong>ReactDOM</strong> and the child component is <strong>HelloWorld</strong>. <strong>message</strong> is the <strong>state</strong> of
<strong>HelloWorld</strong> whereas <strong>name</strong> is its <strong>props</strong>.</p>

<h2>Some important points:</h2>

<ul>
<li>Component <em>must</em> implement the <em>render</em> function.</li>
<li>When <em>state</em> is passed down to child components, it becomes <em>props</em> for child components. ie. <em>state</em> of parent Component will
always be <em>props</em> of child Component.</li>
<li>A component can alter(update/delete) it&rsquo;s <em>state</em> since it belongs to the component. <em>state is mutable</em>.</li>
<li>A component should not alter(update/delete) it&rsquo;s <em>props</em> since they don&rsquo;t belong to the component. <em>props is immutable</em>.</li>
<li>If <em>props</em> are to be altered, then they should be altered in the component where they are declared. When mounting the child
Component, the callbacks that need to be called to update/delete the <em>props</em> should be passed too.</li>
<li>React will update all the child components using the <em>props</em> once the parent component&rsquo;s data(<em>state</em>) has been updated.</li>
<li>When child component receives data(props) from the parent, do not assign it to child component&rsquo;s <em>state</em> and then use this state
to render html. Use the <em>props</em> directly in the render function. The <em>state</em> is set when the component is mounted for the first
time. you will have to explicitly unmount and remount the child component to rerender the update <em>state</em> data.</li>
<li>child Component can call parent Component&rsquo;s only those methods that have been passed on to it.</li>
<li>If a <em>state</em> is refered in multiple components of different types, the <em>state</em> should be added to the most recent ancestor of the
components.</li>
</ul>


<p>We will create a simple example wherein a User can enter <em>message</em>(eg. &lsquo;Hello&rsquo;) and a <em>name</em>(eg. &lsquo;Prasad&rsquo;). The page should
display the <em>message</em> and <em>name</em>.</p>

<p>For sake of keeping this post short and simple, I won&rsquo;t be adding the entire HTML but only the necessary(updated) code.
Also, 1) The code sample would contain only the changes for the components. 2) We have the code sample followed by the explanation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Greet</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Greet</span> <span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;container&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code sample will fail because every Component created using <em>React.createClass</em> must implement the <em>render</em> function.
The detailed error can be viewed in the browser&rsquo;s console.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Greet</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">getInitialState</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span> <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;Hello&#39;</span> <span class="p">};</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/h3&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We updated the Greet component to set some initial value for <em>message</em> and defined the <em>render</em> function to display the
<em>message</em>. Since, <em>message</em> has been defined in the same component, hence, <em>message</em> is <em>Greet&rsquo;s</em> <em>state</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Greet</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">User</span> <span class="nx">message</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">User</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/h3&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, we created a new component named <em>User</em> and passed the Greet&rsquo;s <em>message</em> to the User. Since, <em>message</em> is passed to User,
it&rsquo;s User&rsquo;s <em>props</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">User</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">getInitialState</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Prasad&#39;</span> <span class="p">};</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s1">&#39;text&#39;</span> <span class="nx">name</span><span class="o">=</span><span class="s1">&#39;message&#39;</span> <span class="nx">placeholder</span><span class="o">=</span><span class="s1">&#39;Enter message&#39;</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s1">&#39;text&#39;</span> <span class="nx">name</span><span class="o">=</span><span class="s1">&#39;name&#39;</span> <span class="nx">placeholder</span><span class="o">=</span><span class="s1">&#39;Enter Name&#39;</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/h3&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, we added a <em>state</em> named <em>name</em> to User. We are rendering the <em>props</em> <em>message</em> and <em>state</em> <em>name</em> in the User&rsquo;s <em>render</em> function
along with 2 input fields wherein User can enter the custom <em>message</em> and <em>name</em> that he/she wants to be displayed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">User</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">handleNameChange</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="nx">name</span><span class="o">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span> <span class="p">});</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s1">&#39;text&#39;</span> <span class="nx">placeholder</span><span class="o">=</span><span class="s1">&#39;Enter message&#39;</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s1">&#39;text&#39;</span> <span class="nx">placeholder</span><span class="o">=</span><span class="s1">&#39;Enter Name&#39;</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleNameChange</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/h3&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, The <em>handleNameChange</em> function receives the event and retrieves the updated value from the target. React provides us a
function named <em>setState</em> using which we have updated the <em>state</em> <em>name</em>. If we update the <em>state</em> <em>name</em> without using the <em>setState</em>
function, the updated name is not displayed. This is because the <em>setState</em> informs React that an <em>state</em> has been updated and that
the DOM needs to be updated.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Greet</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">updateMessage</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="nx">message</span><span class="o">:</span> <span class="nx">value</span> <span class="p">});</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">User</span> <span class="nx">message</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span> <span class="nx">handleMessageChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">updateMessage</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">User</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">handleGreetChange</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">handleMessageChange</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s1">&#39;text&#39;</span> <span class="nx">placeholder</span><span class="o">=</span><span class="s1">&#39;Enter message&#39;</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleGreetChange</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s1">&#39;text&#39;</span> <span class="nx">placeholder</span><span class="o">=</span><span class="s1">&#39;Enter Name&#39;</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleNameChange</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/h3&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, the function <em>updateMessage</em> will receive the updated value and will update the <em>state</em> <em>message</em>. Also, we need to pass the
function to User component. When the user types the <em>message</em> in the textbox, the <em>handleGreetChange</em> function is called. This
function retrieves the entered value and passes it <em>handleGreetChange</em> <em>props</em> as a parameter. Since, React implements
unidirectional data flow, any components using the <em>props</em> <em>message</em> are updated with the updated value.</p>

<p>So, the entire code is as</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Greet</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">getInitialState</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span> <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;Hola&#39;</span> <span class="p">};</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">updateMessage</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">message</span><span class="o">:</span> <span class="nx">value</span><span class="p">});</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">User</span> <span class="nx">message</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span> <span class="nx">handleMessageChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">updateMessage</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">User</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">getInitialState</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Prasad&#39;</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">handleNameChange</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">});</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">handleGreetChange</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">handleMessageChange</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s1">&#39;text&#39;</span> <span class="nx">placeholder</span><span class="o">=</span><span class="s1">&#39;Enter Message&#39;</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleGreetChange</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s1">&#39;text&#39;</span> <span class="nx">placeholder</span><span class="o">=</span><span class="s1">&#39;Enter Name&#39;</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleNameChange</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/h3&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">Greet</span><span class="o">/&gt;</span><span class="p">,</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;container&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The User component defined above can be optimized a bit as below</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">User</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">getInitialState</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Prasad&#39;</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">handleNameChange</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">name</span> <span class="o">==</span> <span class="s2">&quot;message&quot;</span><span class="p">){</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">handleMessageChange</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s1">&#39;text&#39;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;message&quot;</span> <span class="nx">placeholder</span><span class="o">=</span><span class="s1">&#39;Enter Message&#39;</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleGreetChange</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s1">&#39;text&#39;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;name&quot;</span> <span class="nx">placeholder</span><span class="o">=</span><span class="s1">&#39;Enter Name&#39;</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleNameChange</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/h3&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Some experiments</h3>

<p>Ok. Since we have a working example, lets try to make come changes and check if they work or not. If not, why?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Greet</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">getInitialState</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span> <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;Hola&#39;</span> <span class="p">};</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">updateMessage</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">message</span><span class="o">:</span> <span class="nx">value</span><span class="p">});</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">User</span> <span class="nx">message</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span> <span class="nx">handleMessageChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">updateMessage</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We didn&rsquo;t pass the <em>handleMessageChange</em> <em>props</em> to the User component. Now, when we enter the <em>message</em>, the same is not being
displayed on the page. ie. Every parent component props(state/props/function) that you want to access in the child has to be
explicitly passed on to the child Component.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">User</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s1">&#39;text&#39;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;message&quot;</span> <span class="nx">placeholder</span><span class="o">=</span><span class="s1">&#39;Enter Message&#39;</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleGreetChange</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s1">&#39;text&#39;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;name&quot;</span> <span class="nx">placeholder</span><span class="o">=</span><span class="s1">&#39;Enter Name&#39;</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleNameChange</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">some</span><span class="p">}</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">some</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/h3&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, we are accessing data(state/props) that has not been defined in any of the components. The above code will still work as
expected.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Greet</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">updateMessage</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">message</span><span class="o">:</span> <span class="nx">value</span><span class="p">});</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;updated message: &#39;</span><span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">User</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">getInitialState</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Prasad&#39;</span><span class="p">,</span> <span class="nx">message</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">message</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s1">&#39;text&#39;</span> <span class="nx">placeholder</span><span class="o">=</span><span class="s1">&#39;Enter Message&#39;</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleGreetChange</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s1">&#39;text&#39;</span> <span class="nx">placeholder</span><span class="o">=</span><span class="s1">&#39;Enter Name&#39;</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleNameChange</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/h3&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, we assigned the <em>message</em> <em>props</em> to a <em>message</em> <em>state</em> and displayed the <em>message</em> <em>state</em>. When we enter the new <em>message</em> in the input
box, the Greet&rsquo;s <em>message</em> <em>state</em> is being updated(can be viewed in browser console) but the same in not reflected on the page. This
is because the <em>getInitialState</em> is called only when the component is mounted. Its like an initializer/constructor.</p>

<p>Summerizing, the post is about the the key concepts and their relations to get started with React. Hope it was interesting.</p>

<p>Critics are welcome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Filtering for Json Keys as Columns in Active Admin]]></title>
    <link href="http://prasadsurase.github.io/blog/2016/05/03/filtering-for-json-keys-as-columns/"/>
    <updated>2016-05-03T23:01:07+05:30</updated>
    <id>http://prasadsurase.github.io/blog/2016/05/03/filtering-for-json-keys-as-columns</id>
    <content type="html"><![CDATA[<p>After implementing sorting on keys of a json column data, I need to add filtering too. We are using
ActiveAdmin(1.0.0-pre1) with postgres 9.4. You can check my
<a href="http://prasadsurase.github.io/blog/2016/04/25/sorting-for-json-keys-as-columns/">previous</a> post regarding sorting.</p>

<p>For sake of continuity, lets take the same example as in the previous post. We have a model named Box which
stores (length, width &amp; height) as json in a column named dimensions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="err">\</span><span class="n">d</span> <span class="n">boxes</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">Table</span> <span class="ss">&quot;public.boxes&quot;</span>
</span><span class='line'><span class="k">Column</span>   <span class="o">|</span>            <span class="k">Type</span>             <span class="o">|</span>                     <span class="n">Modifiers</span>
</span><span class='line'><span class="c1">------------+-----------------------------+----------------------------------------------------</span>
</span><span class='line'><span class="n">id</span>         <span class="o">|</span> <span class="nb">integer</span>                     <span class="o">|</span> <span class="k">not</span> <span class="k">null</span> <span class="k">default</span> <span class="n">nextval</span><span class="p">(</span><span class="s1">&#39;boxes_id_seq&#39;</span><span class="p">::</span><span class="n">regclass</span><span class="p">)</span>
</span><span class='line'><span class="n">user_id</span>    <span class="o">|</span> <span class="nb">integer</span>                     <span class="o">|</span>
</span><span class='line'><span class="n">dimensions</span> <span class="o">|</span> <span class="n">json</span>                        <span class="o">|</span>
</span><span class='line'><span class="n">volume</span>     <span class="o">|</span> <span class="nb">integer</span>                     <span class="o">|</span>
</span><span class='line'><span class="n">created_at</span> <span class="o">|</span> <span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span> <span class="o">|</span> <span class="k">not</span> <span class="k">null</span>
</span><span class='line'><span class="n">updated_at</span> <span class="o">|</span> <span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span> <span class="o">|</span> <span class="k">not</span> <span class="k">null</span>
</span><span class='line'><span class="n">Indexes</span><span class="p">:</span>
</span><span class='line'><span class="ss">&quot;boxes_pkey&quot;</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span> <span class="n">btree</span> <span class="p">(</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">#</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">boxes</span> <span class="k">limit</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>  <span class="n">id</span> <span class="o">|</span> <span class="n">user_id</span> <span class="o">|</span>             <span class="n">dimensions</span>              <span class="o">|</span> <span class="n">volume</span> <span class="o">|</span>         <span class="n">created_at</span>         <span class="o">|</span>         <span class="n">updated_at</span>
</span><span class='line'> <span class="c1">----+---------+-------------------------------------+--------+----------------------------+----------------------------</span>
</span><span class='line'>   <span class="mi">1</span> <span class="o">|</span>       <span class="mi">3</span> <span class="o">|</span> <span class="err">{</span><span class="ss">&quot;length&quot;</span><span class="p">:</span><span class="mi">4</span><span class="p">,</span><span class="ss">&quot;breadth&quot;</span><span class="p">:</span><span class="mi">7</span><span class="p">,</span><span class="ss">&quot;height&quot;</span><span class="p">:</span><span class="mi">3</span><span class="err">}</span> <span class="o">|</span>     <span class="mi">84</span> <span class="o">|</span> <span class="mi">2016</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">19</span> <span class="mi">18</span><span class="p">:</span><span class="mi">24</span><span class="p">:</span><span class="mi">54</span><span class="p">.</span><span class="mi">281761</span> <span class="o">|</span> <span class="mi">2016</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">19</span> <span class="mi">18</span><span class="p">:</span><span class="mi">30</span><span class="p">:</span><span class="mi">21</span><span class="p">.</span><span class="mi">885756</span>
</span><span class='line'>   <span class="mi">2</span> <span class="o">|</span>       <span class="mi">3</span> <span class="o">|</span> <span class="err">{</span><span class="ss">&quot;length&quot;</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span><span class="ss">&quot;breadth&quot;</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span><span class="ss">&quot;height&quot;</span><span class="p">:</span><span class="mi">8</span><span class="err">}</span> <span class="o">|</span>     <span class="mi">72</span> <span class="o">|</span> <span class="mi">2016</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">19</span> <span class="mi">18</span><span class="p">:</span><span class="mi">24</span><span class="p">:</span><span class="mi">54</span><span class="p">.</span><span class="mi">28487</span>  <span class="o">|</span> <span class="mi">2016</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">19</span> <span class="mi">18</span><span class="p">:</span><span class="mi">30</span><span class="p">:</span><span class="mi">21</span><span class="p">.</span><span class="mi">904715</span>
</span><span class='line'>   <span class="mi">3</span> <span class="o">|</span>       <span class="mi">2</span> <span class="o">|</span> <span class="err">{</span><span class="ss">&quot;length&quot;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="ss">&quot;breadth&quot;</span><span class="p">:</span><span class="mi">4</span><span class="p">,</span><span class="ss">&quot;height&quot;</span><span class="p">:</span><span class="mi">3</span><span class="err">}</span> <span class="o">|</span>     <span class="mi">12</span> <span class="o">|</span> <span class="mi">2016</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">19</span> <span class="mi">18</span><span class="p">:</span><span class="mi">24</span><span class="p">:</span><span class="mi">54</span><span class="p">.</span><span class="mi">287235</span> <span class="o">|</span> <span class="mi">2016</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">19</span> <span class="mi">18</span><span class="p">:</span><span class="mi">30</span><span class="p">:</span><span class="mi">21</span><span class="p">.</span><span class="mi">911726</span>
</span><span class='line'>   <span class="mi">4</span> <span class="o">|</span>       <span class="mi">4</span> <span class="o">|</span> <span class="err">{</span><span class="ss">&quot;length&quot;</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="ss">&quot;breadth&quot;</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="ss">&quot;height&quot;</span><span class="p">:</span><span class="mi">4</span><span class="err">}</span> <span class="o">|</span>      <span class="mi">0</span> <span class="o">|</span> <span class="mi">2016</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">19</span> <span class="mi">18</span><span class="p">:</span><span class="mi">24</span><span class="p">:</span><span class="mi">54</span><span class="p">.</span><span class="mi">289777</span> <span class="o">|</span> <span class="mi">2016</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">19</span> <span class="mi">18</span><span class="p">:</span><span class="mi">30</span><span class="p">:</span><span class="mi">21</span><span class="p">.</span><span class="mi">917753</span>
</span><span class='line'>   <span class="mi">5</span> <span class="o">|</span>       <span class="mi">4</span> <span class="o">|</span> <span class="err">{</span><span class="ss">&quot;length&quot;</span><span class="p">:</span><span class="mi">7</span><span class="p">,</span><span class="ss">&quot;breadth&quot;</span><span class="p">:</span><span class="mi">4</span><span class="p">,</span><span class="ss">&quot;height&quot;</span><span class="p">:</span><span class="mi">0</span><span class="err">}</span> <span class="o">|</span>      <span class="mi">0</span> <span class="o">|</span> <span class="mi">2016</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">19</span> <span class="mi">18</span><span class="p">:</span><span class="mi">24</span><span class="p">:</span><span class="mi">54</span><span class="p">.</span><span class="mi">292116</span> <span class="o">|</span> <span class="mi">2016</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">19</span> <span class="mi">18</span><span class="p">:</span><span class="mi">30</span><span class="p">:</span><span class="mi">21</span><span class="p">.</span><span class="mi">924538</span>
</span><span class='line'><span class="p">(</span><span class="mi">5</span> <span class="k">rows</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In ActiveAdmin, the filters can be displayed as below</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ActiveAdmin</span><span class="o">.</span><span class="n">register</span> <span class="no">Box</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">filter</span> <span class="ss">:length</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:numeric</span><span class="p">,</span> <span class="ss">label</span><span class="p">:</span> <span class="s1">&#39;Length&#39;</span>
</span><span class='line'>  <span class="n">filter</span> <span class="ss">:breadth</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:numeric</span><span class="p">,</span> <span class="ss">label</span><span class="p">:</span> <span class="s1">&#39;Breadth&#39;</span>
</span><span class='line'>  <span class="n">filter</span> <span class="ss">:height</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:numeric</span><span class="p">,</span> <span class="ss">label</span><span class="p">:</span> <span class="s1">&#39;Height&#39;</span>
</span><span class='line'>  <span class="n">filter</span> <span class="ss">:volume</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:numeric</span><span class="p">,</span> <span class="ss">label</span><span class="p">:</span> <span class="s1">&#39;Volume&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">controller</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">scoped_collection</span>
</span><span class='line'>      <span class="no">Box</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="s2">&quot;*, dimensions -&gt;&gt; &#39;length&#39; as length, dimensions -&gt;&gt; &#39;breadth&#39; as breadth, dimensions -&gt;&gt; &#39;height&#39; as height&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">index</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">column</span> <span class="ss">:length</span><span class="p">,</span> <span class="ss">label</span><span class="p">:</span> <span class="s1">&#39;Length&#39;</span><span class="p">,</span> <span class="ss">sortable</span><span class="p">:</span> <span class="s2">&quot;dimensions-&gt;&gt;&#39;length&#39;&quot;</span>
</span><span class='line'>    <span class="n">column</span> <span class="ss">:breadth</span><span class="p">,</span> <span class="ss">label</span><span class="p">:</span> <span class="s1">&#39;Breadth&#39;</span><span class="p">,</span> <span class="ss">sortable</span><span class="p">:</span> <span class="s2">&quot;dimensions-&gt;&gt;&#39;breadth&#39;&quot;</span>
</span><span class='line'>    <span class="n">column</span> <span class="ss">:height</span><span class="p">,</span> <span class="ss">label</span><span class="p">:</span> <span class="s1">&#39;Height&#39;</span><span class="p">,</span> <span class="ss">sortable</span><span class="p">:</span> <span class="s2">&quot;dimensions-&gt;&gt;&#39;height&#39;&quot;</span>
</span><span class='line'>    <span class="n">column</span> <span class="ss">:volume</span><span class="p">,</span> <span class="ss">label</span><span class="p">:</span> <span class="s1">&#39;Volume&#39;</span><span class="p">,</span> <span class="ss">sortable</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since some of the fields are not associated with the table, we need need to define custom ransackers for them.
ActiveAdmin uses ransack gem for implementing searching.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Box</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">ransacker</span> <span class="ss">:length</span> <span class="k">do</span> <span class="o">|</span><span class="n">parent</span><span class="o">|</span>
</span><span class='line'>    <span class="c1"># &#39;-&gt;&gt;&#39; is a part of the syntax for accessing the json keys, &#39;dimensions&#39; the column name and </span>
</span><span class='line'>    <span class="c1"># &#39;length&#39; is the actual key on which the search is to be implemented.</span>
</span><span class='line'>    <span class="no">Arel</span><span class="o">::</span><span class="no">Nodes</span><span class="o">::</span><span class="no">InfixOperation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;-&gt;&gt;&#39;</span><span class="p">,</span> <span class="n">parent</span><span class="o">.</span><span class="n">table</span><span class="o">[</span><span class="ss">:dimensions</span><span class="o">]</span><span class="p">,</span> <span class="no">Arel</span><span class="o">::</span><span class="no">Nodes</span><span class="o">.</span><span class="n">build_quoted</span><span class="p">(</span><span class="s1">&#39;length&#39;</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ransacker</span> <span class="ss">:breadth</span> <span class="k">do</span> <span class="o">|</span><span class="n">parent</span><span class="o">|</span>
</span><span class='line'>    <span class="no">Arel</span><span class="o">::</span><span class="no">Nodes</span><span class="o">::</span><span class="no">InfixOperation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;-&gt;&gt;&#39;</span><span class="p">,</span> <span class="n">parent</span><span class="o">.</span><span class="n">table</span><span class="o">[</span><span class="ss">:dimensions</span><span class="o">]</span><span class="p">,</span> <span class="no">Arel</span><span class="o">::</span><span class="no">Nodes</span><span class="o">.</span><span class="n">build_quoted</span><span class="p">(</span><span class="s1">&#39;breadth&#39;</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ransacker</span> <span class="ss">:height</span> <span class="k">do</span> <span class="o">|</span><span class="n">parent</span><span class="o">|</span>
</span><span class='line'>    <span class="no">Arel</span><span class="o">::</span><span class="no">Nodes</span><span class="o">::</span><span class="no">InfixOperation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;-&gt;&gt;&#39;</span><span class="p">,</span> <span class="n">parent</span><span class="o">.</span><span class="n">table</span><span class="o">[</span><span class="ss">:dimensions</span><span class="o">]</span><span class="p">,</span> <span class="no">Arel</span><span class="o">::</span><span class="no">Nodes</span><span class="o">.</span><span class="n">build_quoted</span><span class="p">(</span><span class="s1">&#39;height&#39;</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># The below ransackers do not work. Also, we need to declare three ransackers :length_equals, :length_greater_than &amp; </span>
</span><span class='line'>  <span class="c1"># :length_less_than for each field. Dont know the reason but am looking into it.</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ransacker</span> <span class="ss">:length_greater_than</span><span class="p">,</span> <span class="ss">formatter</span><span class="p">:</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">value</span><span class="p">){</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="n">where</span><span class="p">(</span><span class="s2">&quot;dimensions -&gt;&gt; &#39;length&#39; &gt; &#39;</span><span class="si">#{</span><span class="n">value</span><span class="si">}</span><span class="s2">&#39;&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">pluck</span> <span class="ss">:id</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">present?</span> <span class="p">?</span> <span class="n">data</span> <span class="p">:</span> <span class="kp">nil</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">do</span> <span class="o">|</span><span class="n">parent</span><span class="o">|</span>
</span><span class='line'>    <span class="n">parent</span><span class="o">.</span><span class="n">table</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This still won&rsquo;t work. The filters are displayed weirdly(dropdown on top and search input field at the bottom) rather in
the expected layout(dropdown on left and search input field on the right). This is because ActiveAdmin adds a class
<a href="https://github.com/activeadmin/activeadmin/blob/master/lib/active_admin/inputs/filters/base/search_method_select.rb#L34"><em>select_and_search</em></a> which decides if a filter field is searchable or not. This class is responsible for the proper
layout and working of filters. The below code is referenced from ActiveAdmin. It decides whether the class is to be
added or not when the filter is initialized.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ActiveAdmin</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Inputs</span>
</span><span class='line'>    <span class="k">module</span> <span class="nn">Filters</span>
</span><span class='line'>      <span class="k">module</span> <span class="nn">Base</span>
</span><span class='line'>        <span class="k">module</span> <span class="nn">SearchMethodSelect</span>
</span><span class='line'>          <span class="k">def</span> <span class="nf">wrapper_html_options</span>
</span><span class='line'>            <span class="n">opts</span> <span class="o">=</span> <span class="k">super</span>
</span><span class='line'>              <span class="p">(</span><span class="n">opts</span><span class="o">[</span><span class="ss">:class</span><span class="o">]</span> <span class="o">||=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39; select_and_search&#39;</span> <span class="k">unless</span> <span class="n">seems_searchable?</span>
</span><span class='line'>            <span class="n">opts</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">ActiveAdmin</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Filters</span>
</span><span class='line'>    <span class="k">module</span> <span class="nn">FormtasticAddons</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">seems_searchable?</span>
</span><span class='line'>        <span class="c1"># ransacker? checks if any custom ransackers are defined. </span>
</span><span class='line'>        <span class="n">has_predicate?</span> <span class="o">||</span> <span class="n">ransacker?</span> <span class="o">||</span> <span class="n">scope?</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, we remove the check for <em>ransacker?</em> by adding a patch in the initializers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config/initializers/hack_for_filter.rb</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">ActiveAdmin</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Filters</span>
</span><span class='line'>    <span class="k">module</span> <span class="nn">FormtasticAddons</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">seems_searchable?</span>
</span><span class='line'>        <span class="n">has_predicate?</span> <span class="o">||</span> <span class="n">scope?</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, the filters will be displayed properly and would send the selected option(Greater than, Equals or Less than) with
the specified value to the ransackers.</p>

<p>I am not inclined towards overriding the library methods but haven&rsquo;t found any other solution for the same. So, for now,
this it the hack that works for me.</p>

<p>Working source code can be found <a href="https://github.com/prasadsurase/active_admin_with_json_field">here</a>. Hope it was interesting.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sorting for Json Keys as Column in Active Admin]]></title>
    <link href="http://prasadsurase.github.io/blog/2016/04/25/sorting-for-json-keys-as-columns/"/>
    <updated>2016-04-25T23:01:50+05:30</updated>
    <id>http://prasadsurase.github.io/blog/2016/04/25/sorting-for-json-keys-as-columns</id>
    <content type="html"><![CDATA[<p>Recently, I had a requirement wherein I need to have sorting on the keys of a json column data. We are using postgres 9.4 and the
schema of the json data is static for all the records. The keys needed to be displayed as columns with sorting enabled against them.
Below is the way I implemented it. Also, on digging into ActiveAdmin, I learned some interesting implementation details of the library.</p>

<p>Lets take an example. We have a model named Box which stores (length, width &amp; height) as json in a column named dimensions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="err">\</span><span class="n">d</span> <span class="n">boxes</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">Table</span> <span class="ss">&quot;public.boxes&quot;</span>
</span><span class='line'>  <span class="k">Column</span>   <span class="o">|</span>            <span class="k">Type</span>             <span class="o">|</span>                     <span class="n">Modifiers</span>
</span><span class='line'><span class="c1">------------+-----------------------------+----------------------------------------------------</span>
</span><span class='line'><span class="n">id</span>         <span class="o">|</span> <span class="nb">integer</span>                     <span class="o">|</span> <span class="k">not</span> <span class="k">null</span> <span class="k">default</span> <span class="n">nextval</span><span class="p">(</span><span class="s1">&#39;boxes_id_seq&#39;</span><span class="p">::</span><span class="n">regclass</span><span class="p">)</span>
</span><span class='line'><span class="n">user_id</span>    <span class="o">|</span> <span class="nb">integer</span>                     <span class="o">|</span>
</span><span class='line'><span class="n">dimensions</span> <span class="o">|</span> <span class="n">json</span>                        <span class="o">|</span>
</span><span class='line'><span class="n">volume</span>     <span class="o">|</span> <span class="nb">integer</span>                     <span class="o">|</span>
</span><span class='line'><span class="n">created_at</span> <span class="o">|</span> <span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span> <span class="o">|</span> <span class="k">not</span> <span class="k">null</span>
</span><span class='line'><span class="n">updated_at</span> <span class="o">|</span> <span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span> <span class="o">|</span> <span class="k">not</span> <span class="k">null</span>
</span><span class='line'><span class="n">Indexes</span><span class="p">:</span>
</span><span class='line'><span class="ss">&quot;boxes_pkey&quot;</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span> <span class="n">btree</span> <span class="p">(</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">#</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">boxes</span> <span class="k">limit</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>  <span class="n">id</span> <span class="o">|</span> <span class="n">user_id</span> <span class="o">|</span>             <span class="n">dimensions</span>              <span class="o">|</span> <span class="n">volume</span> <span class="o">|</span>         <span class="n">created_at</span>         <span class="o">|</span>         <span class="n">updated_at</span>
</span><span class='line'> <span class="c1">----+---------+-------------------------------------+--------+----------------------------+----------------------------</span>
</span><span class='line'>   <span class="mi">1</span> <span class="o">|</span>       <span class="mi">3</span> <span class="o">|</span> <span class="err">{</span><span class="ss">&quot;length&quot;</span><span class="p">:</span><span class="mi">4</span><span class="p">,</span><span class="ss">&quot;breadth&quot;</span><span class="p">:</span><span class="mi">7</span><span class="p">,</span><span class="ss">&quot;height&quot;</span><span class="p">:</span><span class="mi">3</span><span class="err">}</span> <span class="o">|</span>     <span class="mi">84</span> <span class="o">|</span> <span class="mi">2016</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">19</span> <span class="mi">18</span><span class="p">:</span><span class="mi">24</span><span class="p">:</span><span class="mi">54</span><span class="p">.</span><span class="mi">281761</span> <span class="o">|</span> <span class="mi">2016</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">19</span> <span class="mi">18</span><span class="p">:</span><span class="mi">30</span><span class="p">:</span><span class="mi">21</span><span class="p">.</span><span class="mi">885756</span>
</span><span class='line'>   <span class="mi">2</span> <span class="o">|</span>       <span class="mi">3</span> <span class="o">|</span> <span class="err">{</span><span class="ss">&quot;length&quot;</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span><span class="ss">&quot;breadth&quot;</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span><span class="ss">&quot;height&quot;</span><span class="p">:</span><span class="mi">8</span><span class="err">}</span> <span class="o">|</span>     <span class="mi">72</span> <span class="o">|</span> <span class="mi">2016</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">19</span> <span class="mi">18</span><span class="p">:</span><span class="mi">24</span><span class="p">:</span><span class="mi">54</span><span class="p">.</span><span class="mi">28487</span>  <span class="o">|</span> <span class="mi">2016</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">19</span> <span class="mi">18</span><span class="p">:</span><span class="mi">30</span><span class="p">:</span><span class="mi">21</span><span class="p">.</span><span class="mi">904715</span>
</span><span class='line'>   <span class="mi">3</span> <span class="o">|</span>       <span class="mi">2</span> <span class="o">|</span> <span class="err">{</span><span class="ss">&quot;length&quot;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="ss">&quot;breadth&quot;</span><span class="p">:</span><span class="mi">4</span><span class="p">,</span><span class="ss">&quot;height&quot;</span><span class="p">:</span><span class="mi">3</span><span class="err">}</span> <span class="o">|</span>     <span class="mi">12</span> <span class="o">|</span> <span class="mi">2016</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">19</span> <span class="mi">18</span><span class="p">:</span><span class="mi">24</span><span class="p">:</span><span class="mi">54</span><span class="p">.</span><span class="mi">287235</span> <span class="o">|</span> <span class="mi">2016</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">19</span> <span class="mi">18</span><span class="p">:</span><span class="mi">30</span><span class="p">:</span><span class="mi">21</span><span class="p">.</span><span class="mi">911726</span>
</span><span class='line'>   <span class="mi">4</span> <span class="o">|</span>       <span class="mi">4</span> <span class="o">|</span> <span class="err">{</span><span class="ss">&quot;length&quot;</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="ss">&quot;breadth&quot;</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="ss">&quot;height&quot;</span><span class="p">:</span><span class="mi">4</span><span class="err">}</span> <span class="o">|</span>      <span class="mi">0</span> <span class="o">|</span> <span class="mi">2016</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">19</span> <span class="mi">18</span><span class="p">:</span><span class="mi">24</span><span class="p">:</span><span class="mi">54</span><span class="p">.</span><span class="mi">289777</span> <span class="o">|</span> <span class="mi">2016</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">19</span> <span class="mi">18</span><span class="p">:</span><span class="mi">30</span><span class="p">:</span><span class="mi">21</span><span class="p">.</span><span class="mi">917753</span>
</span><span class='line'>   <span class="mi">5</span> <span class="o">|</span>       <span class="mi">4</span> <span class="o">|</span> <span class="err">{</span><span class="ss">&quot;length&quot;</span><span class="p">:</span><span class="mi">7</span><span class="p">,</span><span class="ss">&quot;breadth&quot;</span><span class="p">:</span><span class="mi">4</span><span class="p">,</span><span class="ss">&quot;height&quot;</span><span class="p">:</span><span class="mi">0</span><span class="err">}</span> <span class="o">|</span>      <span class="mi">0</span> <span class="o">|</span> <span class="mi">2016</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">19</span> <span class="mi">18</span><span class="p">:</span><span class="mi">24</span><span class="p">:</span><span class="mi">54</span><span class="p">.</span><span class="mi">292116</span> <span class="o">|</span> <span class="mi">2016</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">19</span> <span class="mi">18</span><span class="p">:</span><span class="mi">30</span><span class="p">:</span><span class="mi">21</span><span class="p">.</span><span class="mi">924538</span>
</span><span class='line'><span class="p">(</span><span class="mi">5</span> <span class="k">rows</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In ActiveAdmin, columns can be displayed for non-table fields. All you have to do is project them in the query. In the below example,
length, breadth and height are not columns of boxes but have been projected in the select query.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ActiveAdmin</span><span class="o">.</span><span class="n">register</span> <span class="no">Box</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">controller</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">scoped_collection</span>
</span><span class='line'>      <span class="no">Box</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="s2">&quot;*, dimensions -&gt;&gt; &#39;length&#39; as length, dimensions -&gt;&gt; &#39;breadth&#39; as breadth, dimensions -&gt;&gt; &#39;height&#39; as height&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">index</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">column</span> <span class="ss">:length</span><span class="p">,</span> <span class="ss">label</span><span class="p">:</span> <span class="s1">&#39;Length&#39;</span><span class="p">,</span> <span class="ss">sortable</span><span class="p">:</span> <span class="s2">&quot;dimensions-&gt;&gt;&#39;length&#39;&quot;</span>
</span><span class='line'>    <span class="n">column</span> <span class="ss">:breadth</span><span class="p">,</span> <span class="ss">label</span><span class="p">:</span> <span class="s1">&#39;Breadth&#39;</span><span class="p">,</span> <span class="ss">sortable</span><span class="p">:</span> <span class="s2">&quot;dimensions-&gt;&gt;&#39;breadth&#39;&quot;</span>
</span><span class='line'>    <span class="n">column</span> <span class="ss">:height</span><span class="p">,</span> <span class="ss">label</span><span class="p">:</span> <span class="s1">&#39;Height&#39;</span><span class="p">,</span> <span class="ss">sortable</span><span class="p">:</span> <span class="s2">&quot;dimensions-&gt;&gt;&#39;height&#39;&quot;</span>
</span><span class='line'>    <span class="n">column</span> <span class="ss">:volume</span><span class="p">,</span> <span class="ss">label</span><span class="p">:</span> <span class="s1">&#39;Volume&#39;</span><span class="p">,</span> <span class="ss">sortable</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When defining the columns to be displayed, we pass the query by which the json key would be accessed when sorting is applied.
By default ActiveAdmin appends <em>_asc</em> and <em>_desc</em> to the table columns when sorting. Here, we pass the query overriding the default column name.</p>

<p>ActiveAdmin has a method named <a href="https://github.com/activeadmin/activeadmin/blob/1c85c5654a2ce1d43d4c64d98b928ff133d46406/lib/active_admin/resource_controller/data_access.rb#L210">apply_sorting</a>
which check if the order is valid or not and calls the ordering query.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># When sorting the breadth in descending order, the params sent to the controller are as below.</span>
</span><span class='line'><span class="c1"># {&quot;order&quot;=&gt;&quot;dimensions-&gt;&gt;&#39;length&#39;_desc&quot;, &quot;controller&quot;=&gt;&quot;admin/boxes&quot;, &quot;action&quot;=&gt;&quot;index&quot;}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">apply_sorting</span><span class="p">(</span><span class="n">chain</span><span class="p">)</span>
</span><span class='line'>  <span class="n">params</span><span class="o">[</span><span class="ss">:order</span><span class="o">]</span> <span class="o">||=</span> <span class="n">active_admin_config</span><span class="o">.</span><span class="n">sort_order</span> <span class="c1">#default order for sorting which is &#39;id_desc&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">orders</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="n">params</span><span class="o">[</span><span class="ss">:order</span><span class="o">].</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;_and_&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">fragment</span><span class="o">|</span>
</span><span class='line'>    <span class="n">order_clause</span> <span class="o">=</span> <span class="no">ActiveAdmin</span><span class="o">::</span><span class="no">OrderClause</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">fragment</span><span class="p">)</span> <span class="c1">#dimensions-&gt;&gt;&#39;breadth&#39;_desc</span>
</span><span class='line'>    <span class="c1"># &lt;ActiveAdmin::OrderClause:0x007fad6dfe @column=&quot;dimensions-&gt;&gt;&#39;length&#39;&quot;, @field=&quot;dimensions-&gt;&gt;&#39;length&#39;&quot;, </span>
</span><span class='line'>    <span class="c1"># @op=nil, @order=&quot;desc&quot;&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">order_clause</span><span class="o">.</span><span class="n">valid?</span> <span class="c1">#check if field.present? and order.present?</span>
</span><span class='line'>      <span class="n">orders</span> <span class="o">&lt;&lt;</span> <span class="n">order_clause</span><span class="o">.</span><span class="n">to_sql</span><span class="p">(</span><span class="n">active_admin_config</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">orders</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>    <span class="n">chain</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">chain</span><span class="o">.</span><span class="n">reorder</span><span class="p">(</span><span class="n">orders</span><span class="o">.</span><span class="n">shift</span><span class="p">)</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="n">orders</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># executes SELECT  *, dimensions -&gt;&gt; &#39;length&#39; as length, dimensions -&gt;&gt; &#39;breadth&#39; as breadth, </span>
</span><span class='line'>    <span class="c1"># dimensions -&gt;&gt; &#39;height&#39; as height </span>
</span><span class='line'>    <span class="c1"># FROM &quot;boxes&quot;  ORDER BY &quot;boxes&quot;.dimensions-&gt;&gt;&#39;length&#39; desc;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The last change that we need is to rewrite the
<a href="https://github.com/activeadmin/activeadmin/blob/master/lib/active_admin/order_clause.rb">ActiveAdmin::OrderClause</a>. The OrderClause parses the field and order
string(say, volume_desc or dimensions->>&lsquo;length&rsquo;_desc) and splits it into the field name, operation and the order thats to be applied.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Original code</span>
</span><span class='line'><span class="k">module</span> <span class="nn">ActiveAdmin</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">OrderClause</span>
</span><span class='line'>    <span class="kp">attr_reader</span> <span class="ss">:field</span><span class="p">,</span> <span class="ss">:order</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">clause</span><span class="p">)</span>
</span><span class='line'>      <span class="n">clause</span> <span class="o">=~</span> <span class="sr">/^([\w\_\.]+)(-&gt;&#39;\w+&#39;)?_(desc|asc)$/</span>
</span><span class='line'>      <span class="vi">@column</span> <span class="o">=</span> <span class="vg">$1</span>
</span><span class='line'>      <span class="vi">@op</span> <span class="o">=</span> <span class="vg">$2</span>
</span><span class='line'>      <span class="vi">@order</span> <span class="o">=</span> <span class="vg">$3</span>
</span><span class='line'>
</span><span class='line'>      <span class="vi">@field</span> <span class="o">=</span> <span class="o">[</span><span class="vi">@column</span><span class="p">,</span> <span class="vi">@op</span><span class="o">].</span><span class="n">compact</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">valid?</span>
</span><span class='line'>      <span class="vi">@field</span><span class="o">.</span><span class="n">present?</span> <span class="o">&amp;&amp;</span> <span class="vi">@order</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">to_sql</span><span class="p">(</span><span class="n">active_admin_config</span><span class="p">)</span>
</span><span class='line'>      <span class="n">table</span> <span class="o">=</span> <span class="n">active_admin_config</span><span class="o">.</span><span class="n">resource_column_names</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="vi">@column</span><span class="p">)</span> <span class="p">?</span> <span class="n">active_admin_config</span><span class="o">.</span><span class="n">resource_table_name</span> <span class="p">:</span> <span class="kp">nil</span>
</span><span class='line'>      <span class="n">table_column</span> <span class="o">=</span> <span class="p">(</span><span class="vi">@column</span> <span class="o">=~</span> <span class="sr">/\./</span><span class="p">)</span> <span class="p">?</span> <span class="vi">@column</span> <span class="p">:</span> <span class="o">[</span><span class="n">table</span><span class="p">,</span> <span class="n">active_admin_config</span><span class="o">.</span><span class="n">resource_quoted_column_name</span><span class="p">(</span><span class="vi">@column</span><span class="p">)</span><span class="o">].</span><span class="n">compact</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="o">[</span><span class="n">table_column</span><span class="p">,</span> <span class="vi">@op</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="vi">@order</span><span class="o">].</span><span class="n">compact</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Updated code in config/initializers/hacked_order_clause.rb</span>
</span><span class='line'><span class="k">module</span> <span class="nn">ActiveAdmin</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">OrderClause</span>
</span><span class='line'>    <span class="kp">attr_reader</span> <span class="ss">:field</span><span class="p">,</span> <span class="ss">:order</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">clause</span><span class="p">)</span>
</span><span class='line'>      <span class="n">clause</span> <span class="o">=~</span> <span class="sr">/^([\w\_\.]+)(-&gt;&#39;\w+&#39;)?_(desc|asc)$|^([\w\_\.]+-&gt;&gt;&#39;[\w\_]+&#39;)(-&gt;&#39;\w+&#39;)?_(desc|asc)$/</span>
</span><span class='line'>      <span class="vi">@column</span> <span class="o">=</span> <span class="vg">$1</span> <span class="o">||</span> <span class="vg">$4</span>
</span><span class='line'>      <span class="vi">@op</span> <span class="o">=</span> <span class="vg">$2</span> <span class="o">||</span> <span class="vg">$5</span>
</span><span class='line'>      <span class="vi">@order</span> <span class="o">=</span> <span class="vg">$3</span> <span class="o">||</span> <span class="vg">$6</span>
</span><span class='line'>
</span><span class='line'>      <span class="vi">@field</span> <span class="o">=</span> <span class="o">[</span><span class="vi">@column</span><span class="p">,</span> <span class="vi">@op</span><span class="o">].</span><span class="n">compact</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">valid?</span>
</span><span class='line'>      <span class="vi">@field</span><span class="o">.</span><span class="n">present?</span> <span class="o">&amp;&amp;</span> <span class="vi">@order</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">to_sql</span><span class="p">(</span><span class="n">active_admin_config</span><span class="p">)</span>
</span><span class='line'>      <span class="n">table</span> <span class="o">=</span> <span class="n">column_in_table?</span><span class="p">(</span><span class="n">active_admin_config</span><span class="o">.</span><span class="n">resource_column_names</span><span class="p">,</span> <span class="vi">@column</span><span class="p">)</span> <span class="p">?</span> <span class="n">active_admin_config</span><span class="o">.</span><span class="n">resource_table_name</span> <span class="p">:</span> <span class="kp">nil</span>
</span><span class='line'>      <span class="n">table_column</span> <span class="o">=</span> <span class="p">(</span><span class="vi">@column</span> <span class="o">=~</span> <span class="sr">/\./</span><span class="p">)</span> <span class="p">?</span> <span class="vi">@column</span> <span class="p">:</span> <span class="o">[</span>
</span><span class='line'>        <span class="n">table</span><span class="p">,</span> <span class="n">json_column?</span><span class="p">(</span><span class="vi">@column</span><span class="p">)</span> <span class="p">?</span> <span class="vi">@column</span> <span class="p">:</span> <span class="n">active_admin_config</span><span class="o">.</span><span class="n">resource_quoted_column_name</span><span class="p">(</span><span class="vi">@column</span><span class="p">)</span>
</span><span class='line'>      <span class="o">].</span><span class="n">compact</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="o">[</span><span class="n">table_column</span><span class="p">,</span> <span class="vi">@op</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="vi">@order</span><span class="o">].</span><span class="n">compact</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">json_column?</span><span class="p">(</span><span class="n">column</span><span class="p">)</span>
</span><span class='line'>      <span class="n">column</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s1">&#39;-&gt;&gt;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span>
</span><span class='line'>      <span class="nf">column_in_table?</span><span class="p">(</span><span class="n">names</span><span class="p">,</span> <span class="n">column</span><span class="p">)</span>
</span><span class='line'>      <span class="n">column</span> <span class="o">=</span> <span class="n">json_column?</span><span class="p">(</span><span class="n">column</span><span class="p">)</span> <span class="p">?</span> <span class="n">column</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;-&gt;&gt;&#39;</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">strip</span> <span class="p">:</span> <span class="n">column</span>
</span><span class='line'>      <span class="n">names</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">column</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Working source code can be found <a href="https://github.com/prasadsurase/active_admin_with_json_field">here</a>. Hope it was interesting.</p>
]]></content>
  </entry>
  
</feed>
